require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const FormData = require('form-data');
const OpenAI = require('openai');
const puppeteer = require('puppeteer');

// Load environment variables
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const SERPAPI_API_KEY = process.env.SERPAPI_API_KEY;

// Initialize Telegram Bot
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// Maintain user conversation history
const userConversations = {};
const userPrograms = {};

// Function to search the web using SerpAPI
async function searchWeb(query) {
  try {
    const response = await axios.get('https://google.serper.dev/search', {
      params: {
        q: query,
        api_key: SERPAPI_API_KEY,
        gl: 'ru',
        hl: 'ru',
      },
    });
    return response.data;
  } catch (error) {
    console.error('Error searching the web:', error);
    return null;
  }
}

// Function to extract text from a webpage using Puppeteer
async function extractPageContent(url) {
  try {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto(url, { waitUntil: 'networkidle2' });

    // Extract the main content of the page
    const content = await page.evaluate(() => {
      return document.body.innerText;
    });

    await browser.close();
    return content;
  } catch (error) {
    console.error('Error extracting page content:', error);
    return null;
  }
}

// Function to summarize content from multiple pages using OpenAI
async function summarizePagesContent(contents) {
  try {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç:\n\n${contents
      .map((content, index) => `–°–∞–π—Ç ${index + 1}:\n${content.slice(0, 5000)}`) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      .join('\n\n')}`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 500, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    });

    return response.choices[0].message.content;
  } catch (error) {
    console.error('Error summarizing pages content:', error);
    return null;
  }
}

// Function to determine if a search is required
async function isSearchRequired(query, chatId) {
  try {
    const conversationContext = userConversations[chatId]
      ? userConversations[chatId].map((msg) => `${msg.role}: ${msg.content}`).join('\n')
      : '';

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è:
1. "web" - –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
2. "program" - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É
3. "chat" - –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: web, program –∏–ª–∏ chat`
        },
        {
          role: 'user',
          content: `–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n${conversationContext}\n–ó–∞–ø—Ä–æ—Å: "${query}"\n–¢–∏–ø:`
        }
      ],
      temperature: 0.3
    });

    return response.choices[0].message.content.trim().toLowerCase();
  } catch (error) {
    console.error('Error determining request type:', error);
    return 'chat';
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º (–¥–æ–±–∞–≤–ª–µ–Ω–∞)
async function modifyExistingProgram(program, userMessage, chatId) {
  const prompt = `–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π –ø—Ä–æ–≥—Ä–∞–º–º—É:\n\`\`\`javascript\n${program.code}\n\`\`\`\n–ó–∞–ø—Ä–æ—Å: "${userMessage}"\n–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –∫–æ–¥ :`;
  
  const response = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [{ role: 'user', content: prompt }],
    max_tokens: 2000
  });

  const newCode = response.choices[0].message.content;
  program.history.push(program.code); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
  program.code = newCode;
  program.updatedAt = new Date();
  
  return program;
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è createAndRunProgram (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
async function createAndRunProgram(userMessage, chatId) {
  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{
        role: 'user', 
        content: `–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è: "${userMessage}". –í–µ—Ä–Ω–∏ JSON —Å code, installCommands –∏ description`
      }]
    });

    const { code, installCommands, description } = parseJSONResponse(response.choices[0].message.content);
    const programId = `prog_${Date.now()}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    userPrograms[chatId] = userPrograms[chatId] || [];
    userPrograms[chatId].push({
      id: programId,
      code,
      installCommands,
      description,
      history: [],
      createdAt: new Date(),
      updatedAt: new Date()
    });

    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const fileName = `${programId}.js`;
    fs.writeFileSync(fileName, code);
    
    await bot.sendMessage(chatId, `üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: ${description}`);
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ...
    
  } catch (error) {
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}


// –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
async function checkFallback(query) {
  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{
        role: 'user',
        content: `–ù—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å: "${query}"? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"`
      }],
      temperature: 0.1,
      max_tokens: 3
    });
    
    return response.choices[0].message.content.trim().toLowerCase() === '–¥–∞';
  } catch (error) {
    return false;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function parseJSONResponse(text) {
  try {
    const jsonStart = text.indexOf('{');
    const jsonEnd = text.lastIndexOf('}') + 1;
    return JSON.parse(text.slice(jsonStart, jsonEnd));
  } catch (e) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');
  }
}

async function executeCommand(command, chatId) {
  return new Promise((resolve, reject) => {
    const process = exec(command, { timeout: 30000 }, (error, stdout, stderr) => {
      if (error) {
        reject(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
      } else if (stderr) {
        resolve(stderr);
      } else {
        resolve(stdout);
      }
    });

    setTimeout(() => {
      process.kill();
      reject('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)');
    }, 31000);
  });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
async function createAndRunProgram(userMessage, chatId) {
  try {
    const prompt = `
–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Node.js –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: "${userMessage}".
–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π:
- "code": –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
- "installCommands": –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- "description": –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
{
  "code": "console.log('Hello, World!');",
  "installCommands": ["npm install axios"],
  "description": "–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
}
`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π Node.js —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 2000,
    });

    const { code, installCommands, description } = parseJSONResponse(response.choices[0].message.content);
    
    const fileName = `user_${chatId}_${Date.now()}.js`;
    const filePath = path.join(__dirname, fileName);
    fs.writeFileSync(filePath, code);
    
    await bot.sendMessage(chatId, `üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${description}`);
    await bot.sendMessage(chatId, `üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${fileName}`);

    if (installCommands?.length > 0) {
      await bot.sendMessage(chatId, '‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
      for (const command of installCommands) {
        try {
          const output = await executeCommand(command, chatId);
          await bot.sendMessage(chatId, `‚úÖ ${command}\n${output}`);
        } catch (error) {
          await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ ${command}:\n${error}`);
          throw error;
        }
      }
    }

    await bot.sendMessage(chatId, 'üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É...');
    try {
      const output = await executeCommand(`node ${filePath}`, chatId);
      await bot.sendMessage(chatId, `üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n${output}`);
    } catch (error) {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n${error}`);
      throw error;
    }

    // fs.unlinkSync(filePath);
    await bot.sendMessage(chatId, '‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');

  } catch (error) {
    await bot.sendMessage(chatId, `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n${error.message}`);
  }
}

// Handle "/start" command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userConversations[chatId] = []; // Initialize conversation history for the user
  bot.sendMessage(chatId, "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?");
});

// Handle text messages
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  userConversations[chatId] = userConversations[chatId] || [];

  if (msg.text && !msg.text.startsWith('/')) {
    const userMessage = msg.text;
    userConversations[chatId].push({ role: 'user', content: userMessage });

    const requestType = await isSearchRequired(userMessage, chatId);

    switch (requestType) {
      case 'program':
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
          const lastProgram = userPrograms[chatId]?.[userPrograms[chatId].length - 1];
          if (lastProgram) {
            const isModification = await openai.chat.completions.create({
              model: 'gpt-3.5-turbo',
              messages: [{
                role: 'user',
                content: `–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ "${userMessage}" –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"`
              }],
              temperature: 0.1
            });

            if (isModification.choices[0].message.content.trim().toLowerCase() === '–¥–∞') {
              const modifiedProgram = await modifyExistingProgram(lastProgram, userMessage, chatId);
              const fileName = `${modifiedProgram.id}.js`;
              fs.writeFileSync(fileName, modifiedProgram.code);
              await bot.sendMessage(chatId, `üîÑ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${fileName}`);
              return;
            }
          }
          
          // –ï—Å–ª–∏ –Ω–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
          await createAndRunProgram(userMessage, chatId);
          
        } catch (error) {
          await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
        break;

      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è web –∏ chat –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      case 'web':
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ ...
        break;
        
      case 'chat':
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è —á–∞—Ç–∞ ...
        break;
    }
  }

  // –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
  if (msg.text?.startsWith('/list')) {
    const programs = userPrograms[chatId] || [];
    await bot.sendMessage(chatId, `üìÇ –í–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n${programs.map(p => `- ${p.id}: ${p.description}`).join('\n')}`);
  }
  
  if (msg.text?.startsWith('/run')) {
    const programId = msg.text.split(' ')[1];
    const program = (userPrograms[chatId] || []).find(p => p.id === programId);
    if (program) {
      await executeCommand(`node ${program.id}.js`, chatId);
    }
  }
});
// Handle voice messages
bot.on('voice', async (msg) => {
  const chatId = msg.chat.id;
  const fileId = msg.voice.file_id;

  try {
    // Get the voice message file
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${file.file_path}`;
    const audioPath = path.join(__dirname, 'audio.ogg');

    // Download the file
    const writer = fs.createWriteStream(audioPath);
    const response = await axios({
      url: fileUrl,
      method: 'GET',
      responseType: 'stream',
    });
    response.data.pipe(writer);

    await new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });

    // Transcribe the audio file using OpenAI's API
    const formData = new FormData();
    formData.append('file', fs.createReadStream(audioPath));
    formData.append('model', 'whisper-1');

    const transcriptionResponse = await axios.post(
      'https://api.openai.com/v1/audio/transcriptions',
      formData,
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          ...formData.getHeaders(),
        },
      }
    );

    const transcription = transcriptionResponse.data.text;
    userConversations[chatId] = userConversations[chatId] || [];
    userConversations[chatId].push({ role: 'user', content: transcription });

    // Determine if a search is required
    const searchRequired = await isSearchRequired(transcription, chatId);

    if (searchRequired == "web") {
      // Perform a web search
      const searchResults = await searchWeb(transcription);

      if (searchResults && searchResults.organic) {
        // Extract content from the top 3 pages
        const topResults = searchResults.organic.slice(0, 3);
        const pageContents = [];

        for (const result of topResults) {
          const content = await extractPageContent(result.link);
          if (content) {
            pageContents.push(content);
          }
        }

        if (pageContents.length > 0) {
          // Summarize the content from the pages
          const summary = await summarizePagesContent(pageContents);

          if (summary) {
            bot.sendMessage(chatId, summary);
          } else {
            bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü.');
          }
        } else {
          bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü.');
        }
      } else {
        bot.sendMessage(chatId, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      }
    } else {
      // Get a response from ChatGPT
      const chatResponse = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-4o',
          messages: userConversations[chatId],
        },
        {
          headers: {
            Authorization: `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
        }
      );

      const reply = chatResponse.data.choices[0].message.content;
      userConversations[chatId].push({ role: 'assistant', content: reply });

      bot.sendMessage(chatId, reply);
    }

    fs.unlinkSync(audioPath);
  } catch (error) {
    console.error('Error:', error.response?.data || error.message);
    bot.sendMessage(chatId, 'Failed to process your voice message.');
  }
});

// Handle photo messages
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const fileId = msg.photo[msg.photo.length - 1].file_id; // Get the highest resolution image
  const userCaption = msg.caption; // Get the user's caption (description) for the image

  try {
    // Get the image file details from Telegram
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    // Add the image URL and caption (if provided) to the conversation history
    userConversations[chatId] = userConversations[chatId] || [];
    userConversations[chatId].push({
      role: 'user',
      content: [
        { type: 'text', text: userCaption || '–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å' }, // Use the user's caption if provided
        { type: 'image_url', image_url: { url: fileUrl } },
      ],
    });

    // Determine if a search is required based on the caption
    const searchRequired = userCaption ? await isSearchRequired(userCaption, chatId) : false;

    if (searchRequired == "web") {
      // Perform a web search
      const searchResults = await searchWeb(userCaption);

      if (searchResults && searchResults.organic) {
        // Extract content from the top 3 pages
        const topResults = searchResults.organic.slice(0, 3);
        const pageContents = [];

        for (const result of topResults) {
          const content = await extractPageContent(result.link);
          if (content) {
            pageContents.push(content);
          }
        }

        if (pageContents.length > 0) {
          // Summarize the content from the pages
          const summary = await summarizePagesContent(pageContents);

          if (summary) {
            bot.sendMessage(chatId, summary);
          } else {
            bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü.');
          }
        } else {
          bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü.');
        }
      } else {
        bot.sendMessage(chatId, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      }
    } else {
      // Call OpenAI API for image analysis
      const response = await openai.chat.completions.create({
        model: "gpt-4o", // Use the vision model
        messages: userConversations[chatId],
        max_tokens: 300, // Adjust as needed
      });

      // Retrieve the response from OpenAI
      const analysis = response.choices[0].message.content;
      bot.sendMessage(chatId, analysis);

      // Add the bot's response to the conversation history
      userConversations[chatId].push({ role: 'assistant', content: analysis });
    }
  } catch (error) {
    console.error('Error:', error.response?.data || error.message);
    bot.sendMessage(chatId, 'Failed to analyze your image.');
  }
});
